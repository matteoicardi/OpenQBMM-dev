/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  dev                                   |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       volVectorField;
    location    "0";
    object      U;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 1 -1 0 0 0 0];

internalField   #codeStream
{
    codeInclude
    #{
        #include "fvCFD.H"
        #include "constants.H"
    #};

    codeOptions
    #{
        -I$(LIB_SRC)/OpenFOAM/lnInclude \
        -I$(LIB_SRC)/finiteVolume/lnInclude \
        -I$(LIB_SRC)/meshTools/lnInclude
    #};

    code
    #{
        const IOdictionary& d = static_cast<const IOdictionary&>(dict);
        const fvMesh& mesh = refCast<const fvMesh>(d.db());

        const vectorField& points = mesh.C();
        vectorField u(mesh.nCells());

        const scalar twoPi = 2.0*Foam::constant::mathematical::pi;
        forAll (points, celli)
        {
            scalar x = points[celli].x();
            scalar y = points[celli].y();
            u[celli] =
                vector
                (
                    Foam::sin(twoPi*x)*Foam::cos(twoPi*y),
                    -Foam::sin(twoPi*y)*Foam::cos(twoPi*x),
                    0.0
                );
        }
        os  << "nonuniform " << u;
    #};
};

boundaryField
{
    top
    {
        type    cyclic;
    }
    bottom
    {
        type    cyclic;
    }
    left
    {
        type    cyclic;
    }
    right
    {
        type    cyclic;
    }
    front
    {
        type    empty;
    }
    back
    {
        type    empty;
    }
}


// ************************************************************************* //
